import os
import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent))

from app import create_app
from src.ml.trainer import PIXMLTrainer

def initialize_system():
    """Inicializa o sistema com treinamento de modelos"""
    print("üöÄ Iniciando Sistema Extrator de Comprovantes PIX")
    
    # Criar diret√≥rios necess√°rios
    os.makedirs('data/models', exist_ok=True)
    os.makedirs('data/uploads', exist_ok=True)
    os.makedirs('data/extraction_logs', exist_ok=True)
    
    # Treinar modelo inicial se n√£o existir
    try:
        print("Treinando modelo inicial...")
        trainer = PIXMLTrainer()
        
        # Verificar se modelos j√° existem
        if not trainer.load_models():
            # Usar o m√©todo correto
            trainer.train_bank_classifier()  # M√©todo que existe na classe
        else:
            print("‚úÖ Modelos ML j√° existem e foram carregados")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao treinar modelo: {e}")
    
    print("\nüì± Sistema pronto! Acesse:")
    print("üåê Interface Web: http://localhost:5000")
    print("ü§ñ API: http://localhost:5000/api")
    print("üí¨ Chatbot: http://localhost:5000/chatbot")

if __name__ == '__main__':
    initialize_system()
    
    # Criar e executar a aplica√ß√£o Flask
    app = create_app()
    
    # Executar em modo debug
    app.run(
        host='0.0.0.0',
        port=5000,
        debug=True,
        use_reloader=True
    )
